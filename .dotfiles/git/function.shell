if "$VERBOSE"; then
    echo "Load $DOTFILES_DIR/git/function.shell"
fi

gprune() {
  # compare local with remote branches and delete the ones without remote counterpart
  git remote prune origin
  PRUNED=$(git branch -vv | grep ": gone\]" | awk '{print $1}')
  PRUNED_TRIMMED=$(echo $PRUNED | xargs)
  if [ -z "$PRUNED_TRIMMED" ]; then
    echo "Nothing to delete."
    return
  fi
  if [ "$1" = "-D" ]; then
    echo WARNING: those branches are going to be deleted:
    echo "$PRUNED"
    echo -n "Do you wish to delete those branches? (Y/[n]) "
    read yn
    case $yn in
        [Yy]* ) echo "$PRUNED" | xargs -I _ git branch -D _;;
        * ) echo "Abort."; return;;
    esac
  else
    echo "$PRUNED" | xargs -I _ git branch -d _
    echo "If this wasn't successful, try running: $0 -D"
  fi
  echo "Current branches:"
  gbr
}

gls() {
  # show last modified and author of file(s) in version control
  # if no arguments given, execute on whole directory
  if [ $# -eq 0 ]; then
    FILES=($(ls))
  else
    FILES=($@)
  fi
  MAXLEN=0
  IFS="$(printf "\n\b")"
  for f in $FILES; do
    GITLOG=$(git log -1 -- $f)
    if [ ${#f} -gt $MAXLEN ] && [ -n "$GITLOG" ]; then
      MAXLEN=${#f}
    fi
  done
  for f in $FILES; do
    printf -v padding %100s  # simply add 100 whitespaces before and truncate then
    f_tr=$f$padding
    f_tr=${f_tr:0:$MAXLEN}
    git log -1 --pretty=format:"$f_tr %Cred%h%Creset %<(50,trunc)%s %Cgreen(%cr)%Creset %C(bold blue)<%<(15,trunc)%an>%Creset%n" -- $f
  done
}
